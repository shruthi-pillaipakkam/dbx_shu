defaultStorageMapping: WORK
installedPackages: {}
jobs:
  Job-12:
    excludeSelector: ""
    id: 12
    includeSelector: "{ location: WORK name: stg_part } OR { location: SAMPLE name: part } OR { location: WORK name: stg_supplier } OR { location: SAMPLE name: supplier } OR { location: WORK name: stg_part1 }"
    name: New Job
    steps: []
    subgraphs: []
  Job-13:
    excludeSelector: ""
    id: 13
    includeSelector: ""
    name: New Job
    steps: []
    subgraphs: []
locations:
  SAMPLE:
    mappingDefinitions:
      "31":
        database: coalesce
        schema: sample_data
      "42":
        database: coalesce
        schema: sample_data
      "43":
        database: coalesce
        schema: sample_data
  WORK:
    mappingDefinitions:
      "31":
        database: jenn_dev
        schema: goldblum_env
      "42":
        database: jenn_dev
        schema: default
      "43":
        database: jenn_dev
        schema: default
macros: {}
stepTypes:
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Dimension 
        short: dim
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - type: multisourceToggle
            enableIf: "{% if node.override.create.enabled %} false {% else %} true {% endif %}"

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION ALL
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: false
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
            default: false
            
          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            enableIf: "{% if config.groupByAll or  node.override.create.enabled %} false {% else %} true {% endif %}"
            default: false
            

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct or  node.override.create.enabled %} false {% else %} true {% endif %}"    

          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

        systemColumns:
        - displayName: '{{NODE_NAME}}_key'
          transform: ''
          dataType: BIGINT
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: system_version
          transform: ''
          dataType: NUMERIC
          placement: end
          attributeName: isSystemVersion

        - displayName: system_current_flag
          transform: ''
          dataType: VARCHAR(1)
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: system_start_date
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: system_end_date
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: system_create_date
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: system_update_date
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dimension  == #}
            {# == Node Type Description    : This node creates dimension table,view and also override create sql for view  == #}


            {# Override CreateSQL for view #}

            {% if node.override.create.enabled %}

                {{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
                {{ stage('Create Dimension Table') }}

            {# CreateSQL for Table #}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}` {{ col.dataType }}
                        {% if col.isSurrogateKey %}
                            GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1)
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                        {% endif%}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT  '{{ node.description | escape }}'{% endif %}
            	TBLPROPERTIES('delta.columnMapping.mode' = 'name')


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Dimension View') }}

            {# CreateSQL for View #}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}`
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

                    {% if loop.first %}SELECT {% endif %}
                    {% if config.selectDistinct %}DISTINCT{% endif %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS `{{ col.name }}`
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                    {% if config.groupByAll %} GROUP BY ALL {% endif %}
                    {% if not loop.last %} UNION ALL {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dimension  == #}
            {# == Node Type Description    :This node loads data into work table using config options distinct,groupby all,order by ,multi-source  == #}


            {# == Variable check to identify type of dimension == #}

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

            {# == To run data quality tests before data insertion == #}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}


            {% if node.materializationType == 'table' %}

            {# == Queries to be executed before data insertion  == #}

                {% if config.preSQL %}            
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                {% endif %}

             {# == Truncate data before data insertion  == #}

                {% if config.truncateBefore %}
                    {{ stage('Truncate Dimension Table') }}
                    TRUNCATE TABLE {{ ref_no_link(node.location.name, node.name) }}
                {% endif %}
                
                {% if is_type_2 %}
                     
                     {# SCD-Type 2 Dimension == #}
                    
                        {{ stage('MERGE ' + ' Sources' | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} `TGT`
                        USING (
                  

                    {% for source in sources %}

                       {% set joinclause = source.join %}
                       
                        /* New Rows That Don't Exist */
                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS `{{ col.name }}`,
                        {% endfor %}
                            'INSERT_INITIAL_VERSION_ROWS' AS `DML_OPERATION`
                        {{  get_clause(joinclause,'from')  }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} `DIM` ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            `DIM`.`{{ col.name }}` IS NULL
                        {% endfor %}
                        {{ get_clause(joinclause) }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )

                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */

                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                `DIM`.`{{ col.name }}` + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS `{{ col.name }}`,
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS `DML_OPERATION`
                        {{  get_clause(joinclause,'from')  }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} `DIM` ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                        {% endfor %}
                        WHERE `DIM`.`{{ get_value_by_column_attribute("isSystemCurrentFlag") }}` = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(`DIM`.`{{ col.name }}` as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{  get_clause(joinclause)  }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        
                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(SECOND,-0.001,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                `DIM`.`{{ col.name }}`
                            {% endif %}
                            AS `{{ col.name }}`,
                        {% endfor -%}
                            'update_expired_version_rows' AS `DML_OPERATION`
                        {{  get_clause(joinclause,'from')  }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} `DIM` ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                        {% endfor %}
                        WHERE `DIM`.`{{ get_value_by_column_attribute("isSystemCurrentFlag") }}` = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(`DIM`.`{{ col.name }}` as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{  get_clause(joinclause)  }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/

                          (SELECT
                          {% if config.selectDistinct %}
                          DISTINCT
                          {% endif %}
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  `DIM`.`{{ col.name }}`
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS `{{ col.name }}`,
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS `DML_OPERATION`
                          {{  get_clause(joinclause,'from')  }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} `DIM` ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                          {% endfor %}
                          WHERE `DIM`.`{{ get_value_by_column_attribute("isSystemCurrentFlag") }}` = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                          {% endfor %} )
                          
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(`DIM`.`{{ col.name }}` as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        
                           {{  get_clause(joinclause)  }}
                           {% if config.groupByAll %}
                            GROUP BY ALL
                           {% endif %}
                           {{ sortorder_by_colv() }} )      
                        {% endif %}   
                           {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                            {{config.insertStrategy}}
                           {% endif %}            
                    {% endfor %}  
                                     
                    ) AS `SRC`
                    ON
                    {% for col in columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        `TGT`.`{{ col.name }}` = `SRC`.`{{ col.name }}`
                    {% endfor %}
                    AND `TGT`.`{{ get_value_by_column_attribute("isSystemVersion") }}` = `SRC`.`{{ get_value_by_column_attribute("isSystemVersion") }}`
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        `TGT`.`{{ col.name }}` = `SRC`.`{{ col.name }}`
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in columns if not col.isSurrogateKey %}
                        `{{ col.name }}`
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns if not col.isSurrogateKey %}
                        `SRC`.`{{ col.name }}`
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% else %}
                    
                    {# SCD-Type 1 Dimension == #}

                        {{ stage('MERGE ' + ' Sources' | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} `TGT`
                        USING (

                    {% for source in sources %}
                           ( SELECT
                            {% if config.selectDistinct %}
                            DISTINCT
                            {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                    1
                                {% elif col.isSystemCurrentFlag %}
                                    'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS `{{ col.name }}`
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             {{ sortorder_by_colv() }} )     
                             {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                 {{config.insertStrategy}}
                             {% endif %}
                    {% endfor %}
                             )               
                            AS `SRC`             
                        ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            `SRC`.`{{ col.name }}` = `TGT`.`{{ col.name }}`
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST(`SRC`.`{{ col.name }}` as STRING), '**NULL**') <> NVL( CAST(`TGT`.`{{ col.name }}` as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                `TGT`.`{{ col.name }}` = `SRC`.`{{ col.name }}`
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in columns if not col.isSurrogateKey %}
                            `{{ col.name }}`
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in columns if not col.isSurrogateKey %}
                            `SRC`.`{{ col.name }}`
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                {% endif %}

            {# == Queries to be executed post data insertion  == #}

                {% if config.postSQL %}            
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}
            {% endif %}

            {# == To run data quality tests after data insertion == #}

            {% if config.testsEnabled %}
                {% for test in node.tests %}
                    {% if test.runOrder == 'After' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% for column in columns %}
                    {% for test in column.tests %}
                        {{ test_stage(column.name + ": " + test.name) }}
                        {{ test.templateString }}
                    {% endfor %}
                {% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: fct
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - type: multisourceToggle
            enableIf: "{% if node.override.create.enabled %} false {% else %} true {% endif %}"

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION ALL
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: false
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
            
          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            default: false
            enableIf: "{% if config.groupByAll or  node.override.create.enabled %} %} false {% else %} true {% endif %}"

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            default: false
            enableIf: "{% if config.selectDistinct or  node.override.create.enabled %} %} false {% else %} true {% endif %}"   

          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

        systemColumns:
        - displayName: system_create_date
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: system_update_date
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {#
            Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Fact  == #}
            {# == Node Type Description    : This node creates fact table,view and also override create sql for view  == #}

            {# Override CreateSQL for view #}

            {% if node.override.create.enabled %}

            {{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
                {{ stage('Create Fact Table') }}

            {# CreateSQL for Table #}  

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}` {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT  '{{ node.description | escape }}'{% endif %}
                TBLPROPERTIES('delta.columnMapping.mode' = 'name')


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Fact View') }}

            {# CreateSQL for View #}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}`
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

                    {% if loop.first %}SELECT {% endif %}
                    {% if config.selectDistinct %}DISTINCT{% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS `{{ col.name }}`
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                     {% if config.groupByAll %} GROUP BY ALL {% endif %}
                    {% if not loop.last %} UNION ALL {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Fact  == #}
            {# == Node Type Description    : This node loads data into work table using config options distinct,groupby all,order by ,multi-source  == #}

            {# == To run data quality tests before data insertion == #}

            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}

                {# == Queries to be executed before data insertion  == #}

                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                
                {# == Truncate data before data insertion  == #}

                    {% if config.truncateBefore %}
                        {{ stage('Truncate Fact Table') }}
                        TRUNCATE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    {% endif %}
                    
                {# == Check if business key is specified  == #}

                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}    
                    
                        {% if has_business_key %}

                        {# == Executed if business key is specified  == #}

                    
                            {{ stage('MERGE ' + ' Sources' | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} `TGT`
                            USING (
                            
                            {% for source in sources %}
                                (SELECT
                                {% if config.selectDistinct %}
                                DISTINCT
                                {% endif %}
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS `{{ col.name }}`
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                                {% if config.groupByAll %}
                                    GROUP BY ALL
                                {% endif %}
                                {{ sortorder_by_colv() }})
                                {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                    {{config.insertStrategy}}
                                {% endif %}
                            {% endfor %}   
                                )
                                AS `SRC`
                            ON
                            {% for col in columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                `SRC`.`{{ col.name }}` = `TGT`.`{{ col.name }}`
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST(`SRC`.`{{ col.name }}` as STRING), '**NULL**') <> NVL( CAST(`TGT`.`{{ col.name }}` as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}

                            THEN UPDATE SET
                            {%- for col in columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    `TGT`.`{{ col.name }}` = `SRC`.`{{ col.name }}`
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in columns if not col.isSurrogateKey %}
                                `{{ col.name }}`
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in columns if not col.isSurrogateKey %}
                                `SRC`.`{{ col.name }}`
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}

                           {# == Executed if business key is not specified  == #}

                            {{ stage('Insert ' + ' Sources' | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in columns %}
                                        `{{ col.name }}`
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                            {% for source in sources %}
                                (SELECT
                                {% if config.selectDistinct %}
                                DISTINCT
                                {% endif %}
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS `{{ col.name }}`
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                             {% if config.groupByAll %}
                                 GROUP BY ALL
                             {% endif %}
                             {{ sortorder_by_colv() }})
                             {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                 {{config.insertStrategy}}
                             {% endif %}
                            {% endfor %} 
                        {% endif %}

             {# == Queries to be executed post data insertion  == #}

                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

            {# == To run data quality tests after data insertion == #}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |

        capitalized: Stage
        short: stg
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Stage  == #}
            {# == Node Type Description    : This node creates stage table,view and also override create sql for view  == #}


            {# Override CreateSQL for view #}

            {% if node.override.create.enabled %}

                {{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
                {{ stage('Create Stage Table') }}

            {# CreateSQL for Table #}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}` {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT  '{{ node.description | escape }}'{% endif %}
                TBLPROPERTIES('delta.columnMapping.mode' = 'name')


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}


            {# CreateSQL for View #}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}`
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% if config.selectDistinct %}
                    DISTINCT
                    {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS `{{ col.name }}`
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}
                    {% if config.groupByAll %}
                       Group By All
                    {% endif %}
                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Stage  == #}
            {# == Node Type Description    : This node loads data into stage table using config options distinct,groupby all,order by ,multi-source == #}


             {# == To run data quality tests before data insertion == #}

            {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

                {# == Queries to be executed before data insertion  == #}

                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                {% endif %}


                {# == Multi-Source option  == #}

                    {% if node.isMultisource %}
                        {% set insertStrategy = config.insertStrategy  %}
                    {% else %}
                        {% set insertStrategy = 'INSERT' %}
                    {% endif %}

                {# == Truncate data before data insertion  == #}

                    {% if config.truncateBefore %}

                        {{ stage('Truncate Stage Table') }}
                        TRUNCATE TABLE {{ ref_no_link(node.location.name, node.name) }}

                    {% endif %}


                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                        {{ stage(insertStrategy + ' Sources' | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in columns %}
                                    `{{ col.name }}`
                                    {%- if not loop.last -%},{% endif %}
                                {% endfor %}
                            )
                    {% endif %}


                    {% for source in sources %}

                    {# == Insert data from sources into Stage table  == #}

                        {% if config.insertStrategy == 'INSERT' %}
                            {{ stage('Insert ' + source.name | string ) }}

                            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                            (
                                {% for col in source.columns %}
                                    `{{ col.name }}`
                                    {%- if not loop.last -%},{% endif %}
                                {% endfor %}
                            )
                        {% endif %}

                         (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS `{{ col.name }}`
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}

                            {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             {{ sortorder_by_colv() }} )


                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                            {{config.insertStrategy}}
                        {% endif %}

                    {% endfor %}



            {# == Queries to be executed post data insertion  == #}

                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}
            {% endif %}

            {# == To run data quality tests after data insertion == #}

            {% if config.testsEnabled %}
                {% for test in node.tests %}
                    {% if test.runOrder == 'After' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% for column in columns %}
                    {% for test in column.tests %}
                        {{ test_stage(column.name + ": " + test.name) }}
                        {{ test.templateString }}
                    {% endfor %}
                {% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: v
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items:

            - displayName: OverrideCreateSQL
              attributeName: OverrideSQLCreate
              type: overrideSQLToggle
              default: false

            - type: multisourceToggle
              enableIf: "{% if  node.override.create.enabled %} false {% else %} true {% endif %}"
              default: false

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL"
              isRequired: false
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

            - displayName: Distinct
              attributeName: selectDistinct
              type: toggleButton
              enableIf: "{% if config.groupByAll or  node.override.create.enabled %} false {% else %} true {% endif %}"
              default: false

            - displayName: Group By All
              attributeName: groupByAll
              type: toggleButton
              enableIf: "{% if config.selectDistinct or node.override.create.enabled %} false {% else %} true {% endif %}"
              default: false

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default:  view
              options:
              - view
              isRequired: false
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : View  == #}
            {# == Node Type Description    : This node creates a view and also runs override create sql for view  == #}


            {# Override CreateSQL for view #}


            {% if node.override.create.enabled %}

                {{ node.override.create.script }}

            {% else %}

            {# CreateSQL for view #}

                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}`
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT  '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS `{{ col.name }}`
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}
                    {% if config.groupByAll %} GROUP BY ALL {% endif %}
                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: pstg
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
          
          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION ALL
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: false
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
          
          - type: businessKeyColumns
            isRequired: false
          
          - type: changeTrackingColumns
            isRequired: false

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: false
           

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"
            

          - displayName: Distinct
            attributeName: selectDistinct
            type: toggleButton
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"
            default: false

          - displayName: Group By All
            attributeName: groupByAll
            type: toggleButton
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false
            
          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"    

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"


          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"




        systemColumns:

        - displayName: '{{NODE_NAME}}_key'
          transform: ''
          dataType: BIGINT
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: system_version
          transform: ''
          dataType: NUMERIC
          placement: end
          attributeName: isSystemVersion

        - displayName: system_current_flag
          transform: ''
          dataType: VARCHAR(1)
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: system_start_date
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: system_end_date
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: system_create_date
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: system_update_date
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           :  Persistent Stage == #}
            {# == Node Type Description    : This node loads data into work table using config options distinct,groupby all,order by ,multi-source  == #}

            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}` {{ col.dataType }}
                        {% if col.isSurrogateKey %}
                            GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1)
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT  '{{ node.description | escape }}'{% endif %}
                TBLPROPERTIES('delta.columnMapping.mode' = 'name')


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        `{{ col.name }}`
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT  '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

                    {% if not loop.last %} UNION ALL {% endif %}
                {% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS `{{ col.name }}`
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           :  Persistent Stage == #}
            {# == Node Type Description    : This node loads data into work table using config options distinct,groupby all,order by ,multi-source  == #}

             {# == Check if business key is specified  == #}

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}

            {# == Variable check to identify type of dimension == #}

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}


            {# == To run data quality tests before data insertion == #}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}


            {% if node.materializationType == 'table' %}

            {# == Queries to be executed before data insertion  == #}

                {% if config.preSQL %}
                    {{ stage('Pre-SQL') }}
                    {{ config.preSQL }}
                {% endif %}

             {# == Truncate data before data insertion  == #}

                {% if config.truncateBefore %}
                    {{ stage('Truncate Persistent Stage Table') }}
                    TRUNCATE TABLE {{ ref_no_link(node.location.name, node.name) }}
                {% endif %}
                
                {% if has_business_key and is_type_2 %}

                     {# SCD-Type 2 Dimension == #}   

                        {{ stage('MERGE ' + 'SOURCES' | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} `TGT`
                        USING (

                    {% for source in sources %}

                        /* New Rows That Don't Exist */
                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS `{{ col.name }}`,
                        {% endfor %}
                            'INSERT_INITIAL_VERSION_ROWS' AS `DML_OPERATION`
                        {{  get_clause(source.join,'from')  }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} `DIM` ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                 {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            `DIM`.`{{ col.name }}` IS NULL
                        {% endfor %}
                        {{ get_clause(source.join) }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )

                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */

                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                `DIM`.`{{ col.name }}` + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS `{{ col.name }}`,
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS `DML_OPERATION`
                        {{  get_clause(source.join,'from')  }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} `DIM` ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                             {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                        {% endfor %}
                        WHERE `DIM`.`{{ get_value_by_column_attribute("isSystemCurrentFlag") }}` = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST( {{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(`DIM`.`{{ col.name }}` as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{  get_clause(source.join)  }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        
                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(SECOND,-0.001,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                `DIM`.`{{ col.name }}`
                            {% endif %}
                            AS `{{ col.name }}`,
                        {% endfor -%}
                            'update_expired_version_rows' AS `DML_OPERATION`
                        {{  get_clause(source.join,'from')  }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} `DIM` ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                             {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                        {% endfor %}
                        WHERE `DIM`.`{{ get_value_by_column_attribute("isSystemCurrentFlag") }}` = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST( {{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(`DIM`.`{{ col.name }}` as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {{  get_clause(source.join)  }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }}
                        )
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/

                          (SELECT
                          {% if config.selectDistinct %}
                          DISTINCT
                          {% endif %}
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  `DIM`.`{{ col.name }}`
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                   {{ get_source_transform(col) }}
                              {% endif %}
                              AS `{{ col.name }}`,
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS `DML_OPERATION`
                          {{  get_clause(source.join,'from')  }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} `DIM` ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                               {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                          {% endfor %}
                          WHERE `DIM`.`{{ get_value_by_column_attribute("isSystemCurrentFlag") }}` = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                               {{ get_source_transform(col) }} = `DIM`.`{{ col.name }}`
                          {% endfor %} )
                          
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST( {{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST(`DIM`.`{{ col.name }}` as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                        {{  get_clause(source.join)  }}
                        {% if config.groupByAll %}
                            GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }} )
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                            {{config.insertStrategy}}
                        {% endif %}   
                    {% endfor %}
                                     
                    ) AS `SRC`
                    ON
                    {% for col in columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        `TGT`.`{{ col.name }}` = `SRC`.`{{ col.name }}`
                    {% endfor %}
                    AND `TGT`.`{{ get_value_by_column_attribute("isSystemVersion") }}` = `SRC`.`{{ get_value_by_column_attribute("isSystemVersion") }}`
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        `TGT`.`{{ col.name }}` = `SRC`.`{{ col.name }}`
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in columns if not col.isSurrogateKey %}
                        `{{ col.name }}`
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns if not col.isSurrogateKey %}
                        `SRC`.`{{ col.name }}`
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% elif has_business_key and not is_type_2 %}

                       {# SCD-Type 1 Dimension == #}

                        {{ stage('MERGE ' + 'SOURCES' | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} `TGT`
                        USING (

                        {% for source in sources %}
                           ( SELECT
                            {% if config.selectDistinct %}
                            DISTINCT
                            {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                    1
                                {% elif col.isSystemCurrentFlag %}
                                    'Y'
                                {% else %}
                                     {{ get_source_transform(col) }}
                                {% endif %}
                                AS `{{ col.name }}`
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                             {% if config.groupByAll %}
                             GROUP BY ALL
                             {% endif %}
                             {{ sortorder_by_colv() }} )     
                             {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                 {{config.insertStrategy}}
                             {% endif %}
                    {% endfor %}
                             )               
                            AS `SRC`               
                        ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            `SRC`.`{{ col.name }}` = `TGT`.`{{ col.name }}`
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST(`SRC`.`{{ col.name }}` as STRING), '**NULL**') <> NVL( CAST(`TGT`.`{{ col.name }}` as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                `TGT`.`{{ col.name }}` = `SRC`.`{{ col.name }}`
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in columns if not col.isSurrogateKey %}
                            `{{ col.name }}`
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in columns if not col.isSurrogateKey %}
                            `SRC`.`{{ col.name }}`
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )

                {% else %}

                    {# == Executed if neither business key or change tracking is not specified  == #}


                        {{ stage('Insert ' + 'Sources' | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in columns if not col.isSurrogateKey %}
                                `{{ col.name }}`
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )


                    {% for source in sources %}


                        (SELECT
                        {% if config.selectDistinct %}
                        DISTINCT
                        {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                 {{ get_source_transform(col) }}
                            {% endif %}
                            AS `{{ col.name }}`
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                        {% if config.groupByAll %}
                        GROUP BY ALL
                        {% endif %}
                        {{ sortorder_by_colv() }} ) 
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                            {{config.insertStrategy}}
                        {% endif %}
                    {% endfor %}            
                {% endif %}

            {# == Queries to be executed post data insertion  == #}
                
                {% if config.postSQL %}
                    {{ stage('Post-SQL') }}
                    {{ config.postSQL }}
                {% endif %}
                
            {% endif %}

             {# == To run data quality tests after data insertion == #}

            {% if config.testsEnabled %}
                {% for test in node.tests %}
                    {% if test.runOrder == 'After' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% for column in columns %}
                    {% for test in column.tests %}
                        {{ test_stage(column.name + ": " + test.name) }}
                        {{ test.templateString }}
                    {% endfor %}
                {% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-17:
    id: "17"
    name: New Subgraph
    steps:
      - ee5a0997-3184-446f-a79a-29bfbefa1a46
      - 8e64864c-f340-4000-a70b-76b371bef9b9
version: 2
